"""
This script iterates through all loaded projects in the MicroStrategy server,
consolidates all project settings along with their descriptions and values,
and saves them into a single CSV file.

This script will not work without replacing parameters with real values.
Its basic goal is to present what can be done with this module and to
ease its usage.
"""
import pandas as pd
from mstrio.connection import get_connection
from mstrio.server import Environment, Project

# Define variables which can be later used in a script
WORKSTATION_DATA = 'your_workstation_data'  # Insert workstation data details
OUTPUT_CSV_FILE = 'all_project_settings.csv'  # Insert the name of the output CSV file

# Establish a connection
conn = get_connection(workstationData=WORKSTATION_DATA)
env = Environment(connection=conn)

# Temporarily hardcoded list of projects
loaded_projects = ['your_project_name']  # Replace with the actual project names

# Initialize an empty list to hold all settings
all_project_settings = []

# Iterate through each loaded project
for project_name in loaded_projects:
    print(f"Processing project: {project_name}")
    
    try:
        # Get project object
        project = Project(connection=conn, name=project_name)
        
        # Get project settings and their descriptions
        settings = project.settings.list_properties(show_description=True)
        
        # Flatten the settings and format the data for the DataFrame
        for setting_name, setting_details in settings.items():
            if isinstance(setting_details, dict):
                setting_value = setting_details.get('value', '')
                setting_description = setting_details.get('description', '')
            else:
                setting_value = setting_details
                setting_description = ''
            
            all_project_settings.append({
                "Project Name": project_name,
                "Setting Name": setting_name,
                "Setting Value": setting_value,
                "Setting Description": setting_description
            })
    except Exception as e:
        print(f"Skipping project {project_name} due to error: {e}")
        continue

# Create a DataFrame from the consolidated settings list
all_project_settings_df = pd.DataFrame(all_project_settings)

# Ensure the DataFrame is not empty before saving
if not all_project_settings_df.empty:
    # Save the consolidated settings to a single CSV file
    all_project_settings_df.to_csv(OUTPUT_CSV_FILE, index=False)
    print(f"All project settings saved to {OUTPUT_CSV_FILE}")
else:
    print("No valid settings data to save.")

print("Script execution completed.")