import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning

# Suppress only the single InsecureRequestWarning from urllib3
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

# Server details
base_url = 'http://your-microstrategy-server.com/MicroStrategyLibrary/api'
username = 'your_username'
password = 'your_password'

# Endpoint for authentication
auth_endpoint = f"{base_url}/auth/login"

# Login payload
auth_payload = {
    "username": username,
    "password": password
}

# Headers
headers = {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
}

# Authenticate and get the authToken, with verify=False to bypass SSL verification
response = requests.post(auth_endpoint, json=auth_payload, headers=headers, verify=False)
if response.status_code == 200:
    authToken = response.headers['X-MSTR-AuthToken']
    cookies = response.cookies
    print("Authentication successful!")
else:
    print("Failed to authenticate")
    exit()

# Endpoint to list projects
projects_endpoint = f"{base_url}/projects"

# Fetch projects, with verify=False to bypass SSL verification
projects_response = requests.get(projects_endpoint, headers={
    'X-MSTR-AuthToken': authToken,
    'Accept': 'application/json'
}, cookies=cookies, verify=False)

if projects_response.status_code == 200:
    projects = projects_response.json()
    print("Projects retrieved successfully:")
    for project in projects:
        print(f"Project ID: {project['id']}, Name: {project['name']}")
else:
    print("Failed to retrieve projects")

# Logout (optional but recommended), with verify=False to bypass SSL verification
logout_endpoint = f"{base_url}/auth/logout"
requests.post(logout_endpoint, headers={'X-MSTR-AuthToken': authToken}, cookies=cookies, verify=False)
