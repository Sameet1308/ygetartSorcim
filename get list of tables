import pandas as pd
from mstrio.connection import Connection
from mstrio.project_objects import Project
from mstrio.modeling.schema.table import list_physical_tables, list_logical_tables, list_tables_prefixes, list_warehouse_tables
from mstrio.datasources.datasource_instance import list_connected_datasource_instances
from mstrio.modeling.schema.table import PhysicalTableType

# Disable warnings
import warnings
warnings.filterwarnings("ignore")

# Connect to MicroStrategy with SSL verification disabled
base_url = "your_base_url"  # Replace with your MicroStrategy base URL
username = "your_username"  # Replace with your MicroStrategy username
password = "your_password"  # Replace with your MicroStrategy password

try:
    conn = Connection(base_url=base_url, username=username, password=password, ssl_verify=False)
    conn.connect()
except Exception as e:
    print(f"Failed to connect to MicroStrategy: {e}")
    exit(1)

# Create an environment using the connection
env = Environment(connection=conn)

# Get a list of projects
try:
    projects = env.list_projects()
except Exception as e:
    print(f"Failed to retrieve project list: {e}")
    exit(1)

# List to store project table details
project_tables = []

# Function to get all types of tables for a given project
def get_all_tables_for_project(connection, project_id, project_name):
    project_data = []

    # Switch to the project context
    try:
        connection.select_project(project_id=project_id)
    except Exception as e:
        print(f"Failed to switch to project {project_name} ({project_id}): {e}")
        return project_data

    try:
        # Get a list of table prefixes
        table_prefixes = list_tables_prefixes(connection=connection)
        for prefix in table_prefixes:
            project_data.append([project_name, 'Table Prefix', prefix])

        # Get a list of physical tables
        physical_tables = list_physical_tables(connection=connection)
        for table in physical_tables:
            project_data.append([project_name, 'Physical Table', table.name])

        # Get a list of logical tables
        logical_tables = list_logical_tables(connection=connection)
        for table in logical_tables:
            project_data.append([project_name, 'Logical Table', table.name])

        # List connected datasource instances
        connected_datasource_instances = list_connected_datasource_instances(connection=connection)
        for datasource in connected_datasource_instances:
            project_data.append([project_name, 'Datasource Instance', datasource.name])

        # List of all available Warehouse Tables
        all_warehouse_tables = list_warehouse_tables(connection=connection)
        for table in all_warehouse_tables:
            project_data.append([project_name, 'Warehouse Table', table.name])

        # List logical tables based on physical tables of type normal
        normal_tables = list_logical_tables(connection=connection, table_type=PhysicalTableType.NORMAL)
        for table in normal_tables:
            project_data.append([project_name, 'Normal Logical Table', table.name])

        # List logical tables based on physical tables of type SQL
        sql_tables = list_logical_tables(connection=connection, table_type=PhysicalTableType.SQL)
        for table in sql_tables:
            project_data.append([project_name, 'SQL Logical Table', table.name])

        # List logical tables based on physical tables of type warehouse_partition
        warehouse_partition_tables = list_logical_tables(connection=connection, table_type=PhysicalTableType.WAREHOUSE_PARTITION)
        for table in warehouse_partition_tables:
            project_data.append([project_name, 'Warehouse Partition Logical Table', table.name])
    except Exception as e:
        print(f"Failed to retrieve tables for project {project_name} ({project_id}): {e}")

    return project_data

# Iterate through each project and collect table details
for project in projects:
    project_id = project.id  # Accessing the project ID correctly
    project_name = project.name  # Accessing the project name correctly
    project_tables.extend(get_all_tables_for_project(conn, project_id, project_name))

# Create a DataFrame from the collected project tables data
df = pd.DataFrame(project_tables, columns=['Project Name', 'Table Type', 'Table Name'])

# Export the DataFrame to an Excel file
output_file = 'mstr_projects_tables.xlsx'
df.to_excel(output_file, index=False)

print(f"Exported table details to {output_file}")