from mstrio.connection import Connection
from mstrio.project import list_projects
from mstrio.project_objects import list_all_cubes, OlapCube
import getpass
import pandas as pd
import csv

# Define server URL and credentials
SERVER_URL = "https://env-XXXXXX.customer.cloud.microstrategy.com/MicroStrategyLibrary"
USERNAME = "mstr"
PASSWORD = getpass.getpass(prompt='Password ')

def export_to_csv(filename, df):
    df.to_csv(f"{filename}.csv", index=False, encoding='utf-8', sep=",", quoting=csv.QUOTE_ALL, escapechar="\\")

# List to store SQL results
sql_results = []

# Get a list of all projects
conn = Connection(SERVER_URL, username=USERNAME, password=PASSWORD)
conn.connect()
projects = list_projects(connection=conn)

for project in projects:
    # Connect to each project individually
    proj_conn = Connection(SERVER_URL, username=USERNAME, password=PASSWORD, project_id=project.id)
    proj_conn.connect()
    
    print(f"\nProcessing Project: {project.name} (ID: {project.id})")

    # List OLAP Cubes in the current project
    cubes_as_dicts = list_all_cubes(connection=proj_conn, to_dictionary=True)

    for cube in cubes_as_dicts:
        cube_id, cube_name = cube["id"], cube["name"]
        print(f"\nProcessing Cube: {cube_name} (ID: {cube_id})")

        try:
            current_cube = OlapCube(connection=proj_conn, id=cube_id)
            sql_view = current_cube.export_sql_view()
            if sql_view:
                sql_results.append([
                    project.name, cube_id, cube_name, sql_view
                ])
            else:
                print(f"No SQL found for Cube: {cube_name} (ID: {cube_id})")
        except Exception as e:
            print(f"Failed to get the SQL for cube {cube_name} {cube_id}: {str(e)}")

    # Close project-specific connection
    proj_conn.close()

# Close the general connection
conn.close()

# Create DataFrame for SQL views
df_sql = pd.DataFrame(sql_results, columns=["Project Name", "Cube ID", "Cube Name", "Cube SQL"])

# Export to CSV
export_to_csv("cubes_sql_views", df_sql)

print("Export complete. DataFrame saved to 'cubes_sql_views.csv'.")
