from mstrio.connection import Connection
from mstrio.project import list_projects
from mstrio.project_objects import list_all_cubes, OlapCube
import getpass
import pandas as pd
import csv
import re

# Define server URL and credentials
SERVER_URL = "https://env-XXXXXX.customer.cloud.microstrategy.com/MicroStrategyLibrary"
USERNAME = "mstr"
PASSWORD = getpass.getpass(prompt='Password ')

def export_to_csv(filename, df):
    df.to_csv(f"{filename}.csv", index=False, encoding='utf-8', sep=",", quoting=csv.QUOTE_ALL, escapechar="\\")

# Enhanced Regex patterns to capture more complex SQL queries
table_pattern = re.compile(r'\bfrom\b\s+([\w\.\[\]]+)|\bjoin\b\s+([\w\.\[\]]+)', re.IGNORECASE)
column_pattern = re.compile(r'\bselect\b(.*?)\bfrom\b', re.IGNORECASE | re.DOTALL)

# Lists to store results
detailed_results = []
sql_results = []

# Get a list of all projects
conn = Connection(SERVER_URL, username=USERNAME, password=PASSWORD)
conn.connect()
projects = list_projects(connection=conn)

for project in projects:
    # Connect to each project individually
    proj_conn = Connection(SERVER_URL, username=USERNAME, password=PASSWORD, project_id=project.id)
    proj_conn.connect()
    
    print(f"\nProcessing Project: {project.name} (ID: {project.id})")

    # List OLAP Cubes in the current project
    cubes_as_dicts = list_all_cubes(connection=proj_conn, to_dictionary=True)

    for cube in cubes_as_dicts:
        cube_id, cube_name = cube["id"], cube["name"]
        print(f"\nProcessing Cube: {cube_name} (ID: {cube_id})")

        try:
            current_cube = OlapCube(connection=proj_conn, id=cube_id)
            sql_view = current_cube.export_sql_view()
            if sql_view:
                # Store the complete SQL view
                sql_results.append([
                    project.name, cube_id, cube_name, sql_view
                ])

                # Extract tables
                tables = set(match[0] or match[1] for match in table_pattern.findall(sql_view))

                # Extract columns
                column_extract = column_pattern.search(sql_view)
                columns = set(column.strip() for column in re.split(r',\s*(?![^()]*\))', column_extract.group(1))) if column_extract else set()

                for table in tables:
                    for column in columns:
                        detailed_results.append([
                            project.name, cube_id, cube_name, table, column
                        ])
        except Exception as e:
            print(f"Failed to get the SQL for cube {cube_name} {cube_id}: {str(e)}")

    # Close project-specific connection
    proj_conn.close()

# Close the general connection
conn.close()

# Create DataFrames
df_detailed = pd.DataFrame(detailed_results, columns=["Project Name", "Cube ID", "Cube Name", "Table Name", "Column Name"])
df_sql = pd.DataFrame(sql_results, columns=["Project Name", "Cube ID", "Cube Name", "Cube SQL"])

# Export to CSV
export_to_csv("cubes_tables_columns", df_detailed)
export_to_csv("cubes_sql_views", df_sql)

print("Export complete. DataFrames saved to 'cubes_tables_columns.csv' and 'cubes_sql_views.csv'.")
