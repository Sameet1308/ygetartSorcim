import requests
import pandas as pd
from requests.packages.urllib3.exceptions import InsecureRequestWarning

# Suppress only the single InsecureRequestWarning from urllib3
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

# Server details
base_url = 'http://your-microstrategy-server.com/MicroStrategyLibrary/api'
username = 'your_username'
password = 'your_password'

# Authenticate
def authenticate():
    auth_endpoint = f"{base_url}/auth/login"
    auth_payload = {"username": username, "password": password}
    headers = {'Content-Type': 'application/json', 'Accept': 'application/json'}
    response = requests.post(auth_endpoint, json=auth_payload, headers=headers, verify=False)
    if response.status_code == 200:
        authToken = response.headers.get('X-MSTR-AuthToken')
        cookies = response.cookies
        return authToken, cookies
    else:
        raise Exception("Authentication Failed")

# Fetch projects
def fetch_projects(authToken):
    projects_endpoint = f"{base_url}/projects"
    headers = {'X-MSTR-AuthToken': authToken, 'Accept': 'application/json'}
    response = requests.get(projects_endpoint, headers=headers, verify=False)
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception("Failed to retrieve projects")

# Fetch cubes by project
def fetch_cubes(authToken, project_id):
    cubes_endpoint = f"{base_url}/projects/{project_id}/cubes"
    headers = {'X-MSTR-AuthToken': authToken, 'Accept': 'application/json'}
    response = requests.get(cubes_endpoint, headers=headers, verify=False)
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Failed to retrieve cubes for project {project_id}")

# Main script
try:
    authToken, cookies = authenticate()
    projects = fetch_projects(authToken)
    cubes_info = []

    for project in projects:
        project_id = project.get('id')
        project_name = project.get('name')
        cubes = fetch_cubes(authToken, project_id)
        
        for cube in cubes:
            cube_type = cube.get('type')
            # Filter for cube types 779 or 776
            if cube_type in [779, 776]:
                folder_name = cube.get('folderName', 'N/A')  # Assuming 'folderName' key holds the folder name
                cube_name = cube.get('name')
                cube_id = cube.get('id')
                cubes_info.append({
                    "Project ID": project_id,
                    "Project Name": project_name,
                    "Cube ID": cube_id,
                    "Cube Name": cube_name,
                    "Folder Name": folder_name,
                    "Cube Type": cube_type
                })

    # Creating DataFrame
    df_cubes = pd.DataFrame(cubes_info)
    print("Cubes DataFrame created successfully:")
    print(df_cubes)

except Exception as e:
    print(f"Error: {e}")

# Logout (recommended)
logout_endpoint = f"{base_url}/auth/logout"
headers = {'X-MSTR-AuthToken': authToken}
requests.post(logout_endpoint, headers=headers, cookies=cookies, verify=False)
