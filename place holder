from mstrio.connection import Connection
from mstrio.server import Environment
from mstrio.project_objects import list_all_cubes, OlapCube
import getpass
import pandas as pd
import warnings

# Suppress warnings if you have certificate verification issues
warnings.filterwarnings("ignore")

# Define server URL and credentials
SERVER_URL = "https://env-XXXXXX.customer.cloud.microstrategy.com/MicroStrategyLibrary"
USERNAME = "mstr"
PASSWORD = getpass.getpass(prompt='Password ')

def export_to_excel(filename, df):
    with pd.ExcelWriter(f"{filename}.xlsx", engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Data')

# Establish connection with SSL verification disabled
conn = Connection(SERVER_URL, username=USERNAME, password=PASSWORD, ssl_verify=False)
conn.connect()

# List projects using the Environment class
env = Environment(connection=conn)
projects = env.list_projects()

# List to store SQL results
sql_results = []

for project in projects:
    # Connect to each project individually
    proj_conn = Connection(SERVER_URL, username=USERNAME, password=PASSWORD, project_id=project.id, ssl_verify=False)
    proj_conn.connect()
    
    print(f"\nProcessing Project: {project.name} (ID: {project.id})")

    # List OLAP Cubes in the current project
    cubes_as_dicts = list_all_cubes(connection=proj_conn, to_dictionary=True)

    for cube in cubes_as_dicts:
        cube_id, cube_name, cube_type = cube["id"], cube["name"], cube.get("type", "Unknown")
        try:
            current_cube = OlapCube(connection=proj_conn, id=cube_id)
            sql_view = current_cube.export_sql_view()
            if sql_view:
                sql_results.append([
                    project.name, cube_id, cube_name, cube_type, sql_view
                ])
            else:
                sql_results.append([
                    project.name, cube_id, cube_name, cube_type, "SQL view is empty"
                ])
        except Exception as e:
            sql_results.append([
                project.name, cube_id, cube_name, cube_type, f"Error retrieving SQL: {str(e)}"
            ])

    # Close project-specific connection
    proj_conn.close()

# Close the general connection
conn.close()

# Create DataFrame for SQL views
df_sql = pd.DataFrame(sql_results, columns=["Project Name", "Cube ID", "Cube Name", "Cube Type", "Cube SQL"])

# Export to Excel
export_to_excel("cubes_sql_views", df_sql)

print("Export complete. DataFrame saved to 'cubes_sql_views.xlsx'.")
